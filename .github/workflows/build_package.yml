name: Build a package with Melange

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '30 1 * * 1' # Every Monday at 01:30

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-apk-image:
    runs-on: ubuntu-latest
    environment: melange
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Create melange.rsa from Github secret
        shell: bash
        env:
          MELANGE_KEY: ${{ secrets.MELANGE_KEY }}
        run: echo "${MELANGE_KEY}" > melange.rsa

      - name: Setup melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Build package with Melange
        uses: chainguard-dev/actions/melange-build-pkg@main
        with:
          config: melange-package.yml
          archs: x86_64,arm64
          sign-with-key: true

      - name: Build image with Apko
        uses: chainguard-images/actions/apko-publish@main
        with:
          config: melange-image.yaml
          tag: ghcr.io/duyne-me/wolfi-melange:latest

      # Set image variables for reuse
      - name: Set image metadata
        id: vars
        run: |
          echo "image=ghcr.io/duyne-me/wolfi-melange:latest" >> $GITHUB_OUTPUT
          echo "registry=${{ env.REGISTRY }}" >> $GITHUB_OUTPUT
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT

      - uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

      - id: digest
        name: Get digests for image and platforms
        shell: bash
        run: |
          echo "digest=$(crane digest ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT
          echo "digest-amd64=$(crane digest --platform=linux/amd64 ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT
          echo "digest-arm64=$(crane digest --platform=linux/arm64 ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT

      - name: Sign image
        shell: bash
        env:
          COSIGN_YES: "true"
          COSIGN_EXPERIMENTAL: "1"
        run: |
          cosign sign \
            --recursive \
            --oidc-provider=github-actions \
            ${{ steps.vars.outputs.registry }}/${{ steps.vars.outputs.repository }}@${{ steps.digest.outputs.digest }}
