---

name: Build a package with Melange

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    # run every Monday at 01:30
    - cron: '30 1 * * 1'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-apk-image:
    runs-on: ubuntu-latest
    environment: melange
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Create melange.rsa from Github secret
        shell: bash
        env:
          MELANGE_KEY: ${{ secrets.MELANGE_KEY }}
        run: echo "${MELANGE_KEY}" > melange.rsa

      - name: Setup melange
        uses: chainguard-dev/actions/setup-melange@main

      - name: Build package with Melange
        uses: chainguard-dev/actions/melange-build-pkg@main
        with:
          config: melange-package.yml
          archs: x86_64
          sign-with-key: true

      # https://github.com/chainguard-images/actions/tree/main/apko-publish
      - name: Build image with Apko
        uses: chainguard-images/actions/apko-publish@main
        with:
          config: melange-image.yaml
          tag: ghcr.io/duyne-me/wolfi-melange:latest

      - name: Install crane
        run: |
          mkdir -p /usr/local/bin
          curl -L -o crane.tar.gz https://github.com/google/go-containerregistry/releases/latest/download/crane-linux-amd64.tar.gz
          tar -xzf crane.tar.gz crane
          chmod +x crane
          mv crane /usr/local/bin/crane
          
      - name: Get image digest
        id: digest
        run: |
          DIGEST=$(crane digest ghcr.io/duyne-me/wolfi-melange:latest)
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Sign image with cosign (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
          COSIGN_YES: true
        run: |
          cosign sign ghcr.io/duyne-me/wolfi-melange@${{ steps.digest.outputs.digest }}
